{"name":"Libvncserver","tagline":"Mirror of git://git.code.sf.net/p/libvncserver/code","body":"LibVNCServer: A library for easy implementation of a VNC server.\r\nCopyright (C) 2001-2003 Johannes E. Schindelin\r\n\r\nIf you already used LibVNCServer, you probably want to read NEWS.\r\n\r\nWhat is it?\r\n-----------\r\n\r\nVNC is a set of programs using the RFB (Remote Frame Buffer) protocol. They\r\nare designed to \"export\" a frame buffer via net (if you don't know VNC, I\r\nsuggest you read \"Basics\" below). It is already in wide use for\r\nadministration, but it is not that easy to program a server yourself.\r\n\r\nThis has been changed by LibVNCServer.\r\n\r\nThere are two examples included:\r\n - example, a shared scribble sheet\r\n - pnmshow, a program to show PNMs (pictures) over the net.\r\n\r\nThe examples are not too well documented, but easy straight forward and a\r\ngood starting point.\r\n\r\nTry example: it outputs on which port it listens (default: 5900), so it is\r\ndisplay 0. To view, call\r\n\tvncviewer :0\r\nYou should see a sheet with a gradient and \"Hello World!\" written on it. Try\r\nto paint something. Note that everytime you click, there is some bigger blot,\r\nwhereas when you drag the mouse while clicked you draw a line. The size of the\r\nblot depends on the mouse button you click. Open a second vncviewer with\r\nthe same parameters and watch it as you paint in the other window. This also\r\nworks over internet. You just have to know either the name or the IP of your\r\nmachine. Then it is\r\n\tvncviewer machine.where.example.runs.com:0\r\nor similar for the remote client. Now you are ready to type something. Be sure\r\nthat your mouse sits still, because everytime the mouse moves, the cursor is\r\nreset to the position of the pointer! If you are done with that demo, press\r\nthe down or up arrows. If your viewer supports it, then the dimensions of the\r\nsheet change. Just press Escape in the viewer. Note that the server still\r\nruns, even if you closed both windows. When you reconnect now, everything you\r\npainted and wrote is still there. You can press \"Page Up\" for a blank page.\r\n\r\nThe demo pnmshow is much simpler: you either provide a filename as argument\r\nor pipe a file through stdin. Note that the file has to be a raw pnm/ppm file,\r\ni.e. a truecolour graphics. Only the Escape key is implemented. This may be\r\nthe best starting point if you want to learn how to use LibVNCServer. You\r\nare confronted with the fact that the bytes per pixel can only be 8, 16 or 32.\r\n\r\nProjects using it\r\n----------------------------------------\r\n\r\nVNC for KDE\r\nhttp://www.tjansen.de/krfb\r\n\r\nGemsVNC\r\nhttp://www.elilabs.com/~rj/gemsvnc/\r\n\r\nVNC for Netware\r\nhttp://forge.novell.com/modules/xfmod/project/?vncnw\r\n\r\nRDesktop\r\nhttp://rdesktop.sourceforge.net\r\n\r\nMail me, if your application is missing!\r\n\r\nHow to use\r\n----------\r\n\r\nTo make a server, you just have to initialise a server structure using the\r\nfunction rfbDefaultScreenInit, like\r\n  rfbScreenInfoPtr rfbScreen =\r\n    rfbGetScreen(argc,argv,width,height,8,3,bpp);\r\nwhere byte per pixel should be 1, 2 or 4. If performance doesn't matter,\r\nyou may try bpp=3 (internally one cannot use native data types in this\r\ncase; if you want to use this, look at pnmshow24).\r\n\r\n\r\nYou then can set hooks and io functions (see below) or other\r\noptions (see below).\r\n\r\nAnd you allocate the frame buffer like this:\r\n    rfbScreen->frameBuffer = (char*)malloc(width*height*bpp);\r\n\r\nAfter that, you initialize the server, like\r\n  rfbInitServer(rfbScreen);\r\n\r\nYou can use a blocking event loop, a background (pthread based) event loop,\r\nor implement your own using the rfbProcessEvents function.\r\n\r\nMaking it interactive\r\n---------------------\r\n\r\nInput is handled by IO functions (see below).\r\n\r\nWhenever you change something in the frame buffer, call rfbMarkRectAsModified.\r\nYou should make sure that the cursor is not drawn before drawing yourself\r\nby calling rfbUndrawCursor. You can also draw the cursor using rfbDrawCursor,\r\nbut it hardly seems necessary. For cursor details, see below.\r\n\r\nUtility functions\r\n-----------------\r\n\r\nWhenever you draw something, you have to call\r\n rfbMarkRectAsModified(screen,x1,y1,x2,y2).\r\nThis tells LibVNCServer to send updates to all connected clients.\r\n\r\nBefore you draw something, be sure to call\r\n rfbUndrawCursor(screen).\r\nThis tells LibVNCServer to hide the cursor.\r\nRemark: There are vncviewers out there, which know a cursor encoding, so\r\nthat network traffic is low, and also the cursor doesn't need to be\r\ndrawn the cursor everytime an update is sent. LibVNCServer handles\r\nall the details. Just set the cursor and don't bother any more.\r\n\r\nTo set the mouse coordinates (or emulate mouse clicks), call\r\n  defaultPtrAddEvent(buttonMask,x,y,cl);\r\nIMPORTANT: do this at the end of your function, because this actually draws\r\nthe cursor if no cursor encoding is active.\r\n\r\nWhat is the difference between rfbScreenInfoPtr and rfbClientPtr?\r\n-----------------------------------------------------------------\r\n\r\nThe rfbScreenInfoPtr is a pointer to a rfbScreenInfo structure, which\r\nholds information about the server, like pixel format, io functions,\r\nframe buffer etc.\r\n\r\nThe rfbClientPtr is a pointer to an rfbClientRec structure, which holds\r\ninformation about a client, like pixel format, socket of the\r\nconnection, etc.\r\n\r\nA server can have several clients, but needn't have any. So, if you\r\nhave a server and three clients are connected, you have one instance\r\nof a rfbScreenInfo and three instances of rfbClientRec's.\r\n\r\nThe rfbClientRec structure holds a member\r\n  rfbScreenInfoPtr screen\r\nwhich points to the server and a member\r\n  rfbClientPtr next\r\nto the next client.\r\n\r\nThe rfbScreenInfo structure holds a member\r\n  rfbClientPtr rfbClientHead\r\nwhich points to the first client.\r\n\r\nSo, to access the server from the client structure, you use client->screen.\r\nTo access all clients from a server, get screen->rfbClientHead and\r\niterate using client->next.\r\n\r\nIf you change client settings, be sure to use the provided iterator\r\n rfbGetClientIterator(rfbScreen)\r\nwith\r\n rfbClientIteratorNext(iterator)\r\nand\r\n rfbReleaseClientIterator\r\nto prevent thread clashes.\r\n\r\nOther options\r\n-------------\r\n\r\nThese options have to be set between rfbGetScreen and rfbInitServer.\r\n\r\nIf you already have a socket to talk to, just set rfbScreen->inetdSock\r\n(originally this is for inetd handling, but why not use it for your purpose?).\r\n\r\nTo also start an HTTP server (running on port 5800+display_number), you have\r\nto set rfbScreen->httpdDir to a directory containing vncviewer.jar and\r\nindex.vnc (like the included \"webclients\" directory).\r\n\r\nHooks and IO functions\r\n----------------------\r\n\r\nThere exist the following IO functions as members of rfbScreen:\r\nkbdAddEvent, kbdReleaseAllKeys, ptrAddEvent and setXCutText\r\n\r\nkbdAddEvent(rfbBool down,rfbKeySym key,rfbClientPtr cl)\r\n  is called when a key is pressed.\r\nkbdReleaseAllKeys(rfbClientPtr cl)\r\n  is not called at all (maybe in the future).\r\nptrAddEvent(int buttonMask,int x,int y,rfbClientPtr cl)\r\n  is called when the mouse moves or a button is pressed.\r\n  WARNING: if you want to have proper cursor handling, call\r\n\tdefaultPtrAddEvent(buttonMask,x,y,cl)\r\n  in your own function. This sets the coordinates of the cursor.\r\nsetXCutText(char* str,int len,rfbClientPtr cl)\r\n  is called when the selection changes.\r\n\r\nThere are only two hooks:\r\nnewClientHook(rfbClientPtr cl)\r\n  is called when a new client has connected.\r\ndisplayHook\r\n  is called just before a frame buffer update is sent.\r\n\r\nYou can also override the following methods:\r\ngetCursorPtr(rfbClientPtr cl)\r\n  This could be used to make an animated cursor (if you really want ...)\r\nsetTranslateFunction(rfbClientPtr cl)\r\n  If you insist on colour maps or something more obscure, you have to\r\n  implement this. Default is a trueColour mapping.\r\n\r\nCursor handling\r\n---------------\r\n\r\nThe screen holds a pointer\r\n rfbCursorPtr cursor\r\nto the current cursor. Whenever you set it, remember that any dynamically\r\ncreated cursor (like return value from rfbMakeXCursor) is not free'd!\r\n\r\nThe rfbCursor structure consists mainly of a mask and a source. The mask\r\ndescribes, which pixels are drawn for the cursor (a cursor needn't be\r\nrectangular). The source describes, which colour those pixels should have.\r\n\r\nThe standard is an XCursor: a cursor with a foreground and a background\r\ncolour (stored in backRed,backGreen,backBlue and the same for foreground\r\nin a range from 0-0xffff). Therefore, the arrays \"mask\" and \"source\"\r\ncontain pixels as single bits stored in bytes in MSB order. The rows are\r\npadded, such that each row begins with a new byte (i.e. a 10x4\r\ncursor's mask has 2x4 bytes, because 2 bytes are needed to hold 10 bits).\r\n\r\nIt is however very easy to make a cursor like this:\r\n\r\nchar* cur=\"    \"\r\n          \" xx \"\r\n\t  \" x  \"\r\n\t  \"    \";\r\nchar* mask=\"xxxx\"\r\n           \"xxxx\"\r\n\t   \"xxxx\"\r\n\t   \"xxx \";\r\nrfbCursorPtr c=rfbMakeXCursor(4,4,cur,mask);\r\n\r\nYou can even set \"mask\" to NULL in this call and LibVNCServer will calculate\r\na mask for you (dynamically, so you have to free it yourself).\r\n\r\nThere is also an array named \"richSource\" for colourful cursors. They have\r\nthe same format as the frameBuffer (i.e. if the server is 32 bit,\r\na 10x4 cursor has 4x10x4 bytes).\r\n\r\nHistory\r\n-------\r\n\r\nLibVNCServer is based on Tridia VNC and OSXvnc, which in turn are based on\r\nthe original code from ORL/AT&T.\r\n\r\nWhen I began hacking with computers, my first interest was speed. So, when I\r\ngot around assembler, I programmed the floppy to do much of the work, because\r\nit's clock rate was higher than that of my C64. This was my first experience\r\nwith client/server techniques.\r\n\r\nWhen I came around Xwindows (much later), I was at once intrigued by the\r\nelegance of such connectedness between the different computers. I used it\r\na lot - not the least priority lay on games. However, when I tried it over\r\nmodem from home, it was no longer that much fun.\r\n\r\nWhen I started working with ASP (Application Service Provider) programs, I\r\ntumbled across Tarantella and Citrix. Being a security fanatic, the idea of\r\nrunning a server on windows didn't appeal to me, so Citrix went down the\r\nbasket. However, Tarantella has it's own problems (security as well as the\r\nhigh price). But at the same time somebody told me about this \"great little\r\nadministrator's tool\" named VNC. Being used to windows programs' sizes, the\r\nsurprise was reciprocal inverse to the size of VNC!\r\n\r\nAt the same time, the program \"rdesktop\" (a native Linux client for the\r\nTerminal Services of Windows servers) came to my attention. There where even\r\nworks under way to make a protocol converter \"rdp2vnc\" out of this. However,\r\nmy primary goal was a slow connection and rdp2vnc could only speak RRE\r\nencoding, which is not that funny with just 5kB/s. Tim Edmonds, the original\r\nauthor of rdp2vnc, suggested that I adapt it to Hextile Encoding, which is\r\nbetter. I first tried that, but had no success at all (crunchy pictures).\r\n\r\nAlso, I liked the idea of an HTTP server included and possibly other\r\nencodings like the Tight Encodings from Const Kaplinsky. So I started looking\r\nfor libraries implementing a VNC server where I could steal what I can't make.\r\nI found some programs based on the demo server from AT&T, which was also the\r\nbasis for rdp2vnc (can only speak Raw and RRE encoding). There were some\r\nrumors that GGI has a VNC backend, but I didn't find any code, so probably\r\nthere wasn't a working version anyway.\r\n\r\nAll of a sudden, everything changed: I read on freshmeat that \"OSXvnc\" was\r\nreleased. I looked at the code and it was not much of a problem to work out\r\na simple server - using every functionality there is in Xvnc. It became clear\r\nto me that I *had* to build a library out of it, so everybody can use it.\r\nEvery change, every new feature can propagate to every user of it.\r\n\r\nIt also makes everything easier:\r\n You don't care about the cursor, once set (or use the standard cursor).\r\nYou don't care about those sockets. You don't care about encodings.\r\nYou just change your frame buffer and inform the library about it. Every once\r\nin a while you call rfbProcessEvents and that's it.\r\n\r\nBasics\r\n------\r\n\r\nVNC (Virtual network computing) works like this: You set up a server and can\r\nconnect to it via vncviewers. The communication uses a protocol named RFB\r\n(Remote Frame Buffer). If the server supports HTTP, you can also connect\r\nusing a java enabled browser. In this case, the server sends back a\r\nvncviewer applet with the correct settings.\r\n\r\nThere exist several encodings for VNC, which are used to compress the regions\r\nwhich have changed before they are sent to the client. A client need not be\r\nable to understand every encoding, but at least Raw encoding. Which encoding\r\nit understands is negotiated by the RFB protocol.\r\n\r\nThe following encodings are known to me:\r\nRaw, RRE, CoRRE, Hextile, CopyRect from the original AT&T code and\r\nTight, ZLib, LastRect, XCursor, RichCursor from Const Kaplinsky et al.\r\n\r\nIf you are using a modem, you want to try the \"new\" encodings. Especially\r\nwith my 56k modem I like ZLib or Tight with Quality 0. In my tests, it even\r\nbeats Tarantella.\r\n\r\nThere is the possibility to set a password, which is also negotiated by the\r\nRFB protocol, but IT IS NOT SECURE. Anybody sniffing your net can get the\r\npassword. You really should tunnel through SSH.\r\n\r\nWindows or: why do you do that to me?\r\n--------------------------------------------\r\n\r\nIf you love products from Redmod, you better skip this paragraph.\r\nI am always amazed how people react whenever Microsoft(tm) puts in some\r\nfeatures into their products which were around for a long time. Especially\r\nreporters seem to not know dick about what they are reporting about! But\r\nwhat is everytime annoying again, is that they don't do it right. Every\r\nconcept has it's new name (remember what enumerators used to be until\r\nMickeysoft(tm) claimed that enumerators are what we thought were iterators.\r\nYeah right, enumerators are also containers. They are not separated. Muddy.)\r\n\r\nThere are three packages you want to get hold of: zlib, jpeg and pthreads.\r\nThe latter is not strictly necessary, but when you put something like this\r\ninto your source:\r\n\r\n#define MUTEX(s)\r\n\tstruct {\r\n\t\tint something;\r\n\t\tMUTEX(latex);\r\n\t}\r\n\r\nMicrosoft's C++ compiler doesn't do it. It complains that this is an error.\r\nThis, however, is how I implemented mutexes in case you don't need pthreads,\r\nand so don't need the mutex.\r\n\r\nYou can find the packages at\r\nhttp://www.gimp.org/win32/extralibs-dev-20001007.zip\r\n\r\nThanks go to all the GIMP team!\r\n\r\nWhat are those other targets in the Makefile?\r\n---------------------------------------------\r\n\r\nOSXvnc-server is the original OSXvnc adapted to use the library, which was in\r\nturn adapted from OSXvnc. As you easily can see, the OSX dependend part is\r\nminimal.\r\n\r\nstorepasswd is the original program to save a vnc style password in a file.\r\nUnfortunately, authentication as every vncviewer speaks it means the server\r\nhas to know the plain password. You really should tunnel via ssh or use\r\nyour own PasswordCheck to build a PIN/TAN system.\r\n\r\nsratest is a test unit. Run it to assert correct behaviour of sraRegion. I\r\nwrote this to test my iterator implementation.\r\n\r\nblooptest is a test of pthreads. It is just the example, but with a background\r\nloop to hunt down thread lockups.\r\n\r\npnmshow24 is like pnmshow, but it uses 3 bytes/pixel internally, which is not\r\nas efficient as 4 bytes/pixel for translation, because there is no native data\r\ntype of that size, so you have to memcpy pixels and be real cautious with\r\nendianness. Anyway, it works.\r\n\r\nfontsel is a test for rfbSelectBox and rfbLoadConsoleFont. If you have Linux\r\nconsole fonts, you can browse them via VNC. Directory browsing not implemented\r\nyet :-(\r\n\r\nWhy I don't feel bad about GPL\r\n------------------------------\r\n\r\nAt the beginning of this projects I would have liked to make it a BSD\r\nlicense. However, it is based on plenty of GPL'ed code, so it has to be\r\na GPL. I hear BeeGee complaining: \"but that's invasive, every derivative\r\nwork, even just linking, makes my software GPL!\"\r\n\r\nYeah. That's right. It is because there are nasty jarheads out there who\r\nwould take anybody's work and claim it their own, selling it for much too\r\nmuch money, stealing freedom and innovation from others, saying they were\r\nthe maintainers of innovation, lying, making money with that.\r\n\r\nThe people at AT&T worked really well to produce something as clean and lean\r\nas VNC. The managers decided that for their fame, they would release the\r\nprogram for free. But not only that! They realized that by releasing also\r\nthe code for free, VNC would become an evolving little child, conquering\r\nnew worlds, making it's parents very proud. As well they can be! To protect\r\nthis innovation, they decided to make it GPL, not BSD. The principal\r\ndifference is: You can make closed source programs deriving from BSD, not\r\nfrom GPL. You have to give proper credit with both.\r\n\r\nNow, why not BSD? Well, imagine your child being some famous actor. Along\r\ncomes a manager who exploits your child exclusively, that is: nobody else\r\ncan profit from the child, it itself included. Got it?\r\n\r\nWhat reason do you have now to use this library commercially?\r\n\r\nSeveral: You don't have to give away your product. Then you have effectively\r\ncircumvented the GPL, because you have the benefits of other's work and you\r\ndon't give back anything and you will be in hell for that. In fact, this\r\nlibrary, as my other projects, is a payback for all the free software I can\r\nuse (and sometimes, make better). For example, just now, I am using XEmacs\r\non top of XFree86, all running under Linux.\r\n\r\nBetter: Use a concept like MySQL. This is free software, however, they make\r\nmoney with it. If you want something implemented, you have the choice:\r\nAsk them to do it (and pay a fair price), or do it yourself, normally giving\r\nback your enhancements to the free world of computing.\r\n\r\nLearn from it: If you like the style this is written, learn how to imitate\r\nit. If you don't like the style, learn how to avoid those things you don't\r\nlike. I learnt so much, just from looking at code like Linux, XEmacs,\r\nLilyPond, STL, etc.\r\n\r\nLicense\r\n-------\r\n\r\nThis program is free software; you can redistribute it and/or\r\nmodify it under the terms of the GNU General Public License\r\nas published by the Free Software Foundation; either version 2\r\nof the License, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program; if not, write to the Free Software\r\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.dfdf\r\n\r\nContact\r\n-------\r\n\r\nTo contact me, mail me: Johannes dot Schindelin at gmx dot de\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}